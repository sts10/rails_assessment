Rails Assesment

The answers to this assesment should be submitted in the form of a link to a github repo
The repository should be a rails app with one additional file in the root directory called assesment.txt

Create a blog.

The blog should have the ability to have posts and comments on posts.  There's no need to add a user model.

From any post I should be able to both see all the comments and add a comment myself.

Questions to be answered in the assesment.txt file.

How does rails communicate with the database?  Please be thorough in discussing all the config files and pieces of rails necessary to communicate with the database.

Rails' database.yml file establishes the connection to the database, using SQLite3 in our case. Migrations are written and stored in db/migrate. 


What is a resource?
A resource is a collection of a model, migration, controller, and views that represent a "thing" that your program has. "Post" or "comment" are good examples of these. If there's some thing in your app that users will expect to be able to create, read, update and destroy (CRUD!), it's probably a resource.

What are the standard RESTful routes for a resource?

Method   URI       Description

GET      /posts      Shows all posts (index)
GET      /post/:id   Show user an individual post
GET      /posts/new  Presents or shows user with new post form
POST     /posts      Post route to create new posts. 
GET      /posts/:id/edit  Presents user with the form to edit posts
PATCH    /posts/:id  Update route to edit posts
DELETE   /posts/:id  Destroy route to delete a post


What is CRUD?

CRUD is an acronym from Create Read Update and Delete. These are the common actions we generally want to allow users to perform on any given resource. 

What is REST?

REST, or RESTful, is the idea that URLs should line up with the actions of CRUD. A resources's create-new form, by this standard, lives at /resources/new. This standardization ensures routes are more prefictable from site to site.

What is the difference between CRUD and REST?

CRUD are the actions we want to offer to users. REST is the idea that we should map said actions to particular, standardized URLs.

Describe the flow of a request from a users browser through the rails stack and back.

Users' requests, initiated through their browser, first hits the Rails router, by way of a litany of RACK middleware. It's then passed to the controller. The controller sends a particular request to one or models, who query the database. The model returns this information to the controller, which then sends one or more instance variables to a view. The HTML/CSS/Javascript generated by the view is then returned to the controller, which sends a pretty code string back to the users' browser! 

What are HTTP verbs?

The full list of verbs is GET, POST, PATCH, PUT, and DELETE. However modern browsers only support GET and POST. 

Why do we use migrations?

Migrations offer us programmers an incremental and reversible way of updating the schema of our database. Alterations to a database's schema (it's tables, column names, and data types) can easily be added or safetly rolled back with migrations. 




